{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactPractise\\\\src\\\\PractiseClassComponent\\\\LifeCycleComponent.js\";\nimport React, { Component } from 'react';\nimport LifeCycleComponentB from './LifeCycleComponentB';\n\n/**\r\n * 1.Mounting 2. Updating 3. Unmounting\r\n * \r\n * 1.Mounting:-\r\n *      -> constructor\r\n *      -> getDerivedStateFromProps\r\n *      -> Render \r\n *      -> ComponentDidMount\r\n * \r\n * 2. Updating:-\r\n *      -> getDerivedStateFromProps\r\n *      -> componentDidUpdate\r\n *      -> Render\r\n *      -> getSnapshotBeforeUpdate\r\n *      -> ShouldComponentUpdate\r\n * \r\n * 3. Unmount:-\r\n *      -> willUnmount\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LifeCycleComponent extends Component {\n  // A constructor is called when a component is initialized :)\n  constructor(props) {\n    super(props);\n    // getSnapshotBeforeUpdate method is used to access the previous states or values before state update into the DOM :)\n    this.getSnapshotBeforeUpdate = (prevProps, prevState) => {\n      console.log('getSnapshotBeforeUpdate' + prevState.name);\n      return null;\n    };\n    console.log('constructor called');\n    this.state = {\n      name: 'Rohit'\n    };\n  }\n\n  // the getDerivedStateFromProps method is called just before rendering the elements into the dom :)\n  static getDerivedStateFromProps(props, state) {\n    console.log('getDerivedStateFromProps');\n    return null;\n  }\n\n  // componentDidMount method is called after child components and every elements are rendered into the DOM :)\n  componentDidMount() {\n    console.log('componentDidMount');\n  }\n\n  // shouldComponentUpdate method decides whether state should be update or not :)\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('shouldComponentUpdate');\n    return true;\n  }\n  // componentDidUpdate is called when the state values get changes, and it allows us to access current state values :)\n  componentDidUpdate(prevProps, prevState) {\n    console.log('componentDidUpdate');\n    return null;\n  }\n  render() {\n    console.log('render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"LifeCycleComponent \", this.state.name, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => this.setState({\n          name: 'Virat'\n        }),\n        children: \"click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), this.state.name === 'Rohit' && /*#__PURE__*/_jsxDEV(LifeCycleComponentB, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default LifeCycleComponent;","map":{"version":3,"names":["React","Component","LifeCycleComponentB","jsxDEV","_jsxDEV","LifeCycleComponent","constructor","props","getSnapshotBeforeUpdate","prevProps","prevState","console","log","name","state","getDerivedStateFromProps","componentDidMount","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","render","children","className","onClick","setState","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/reactPractise/src/PractiseClassComponent/LifeCycleComponent.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport LifeCycleComponentB from './LifeCycleComponentB';\r\n\r\n/**\r\n * 1.Mounting 2. Updating 3. Unmounting\r\n * \r\n * 1.Mounting:-\r\n *      -> constructor\r\n *      -> getDerivedStateFromProps\r\n *      -> Render \r\n *      -> ComponentDidMount\r\n * \r\n * 2. Updating:-\r\n *      -> getDerivedStateFromProps\r\n *      -> componentDidUpdate\r\n *      -> Render\r\n *      -> getSnapshotBeforeUpdate\r\n *      -> ShouldComponentUpdate\r\n * \r\n * 3. Unmount:-\r\n *      -> willUnmount\r\n */\r\nclass LifeCycleComponent extends Component {\r\n\r\n    // A constructor is called when a component is initialized :)\r\n    constructor(props) {\r\n        super(props)\r\n        console.log('constructor called');\r\n        this.state = {\r\n            name:'Rohit'\r\n        }\r\n    }\r\n\r\n    // the getDerivedStateFromProps method is called just before rendering the elements into the dom :)\r\n    static getDerivedStateFromProps(props, state) {\r\n        console.log('getDerivedStateFromProps');\r\n        return null \r\n    }\r\n\r\n    // componentDidMount method is called after child components and every elements are rendered into the DOM :)\r\n    componentDidMount() { \r\n        console.log('componentDidMount');\r\n    }\r\n\r\n    // shouldComponentUpdate method decides whether state should be update or not :)\r\n    shouldComponentUpdate(nextProps, nextState) { \r\n        console.log('shouldComponentUpdate');\r\n        return true\r\n    }\r\n\r\n    // getSnapshotBeforeUpdate method is used to access the previous states or values before state update into the DOM :)\r\n    getSnapshotBeforeUpdate = (prevProps, prevState) => {\r\n        console.log('getSnapshotBeforeUpdate'+prevState.name);\r\n        return null\r\n    }\r\n\r\n    // componentDidUpdate is called when the state values get changes, and it allows us to access current state values :)\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('componentDidUpdate');\r\n        return null\r\n    }\r\n\r\n    render() {\r\n        console.log('render');\r\n        return (\r\n            <div>\r\n                LifeCycleComponent {this.state.name}\r\n                <button className='btn btn-primary' onClick={()=>this.setState({name:'Virat'})}>click</button>\r\n                {this.state.name==='Rohit' && <LifeCycleComponentB/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifeCycleComponent"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,mBAAmB,MAAM,uBAAuB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,SAAAC,MAAA,IAAAC,OAAA;AAmBA,MAAMC,kBAAkB,SAASJ,SAAS,CAAC;EAEvC;EACAK,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAwBhB;IAAA,KACAC,uBAAuB,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;MAChDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAACF,SAAS,CAACG,IAAI,CAAC;MACrD,OAAO,IAAI;IACf,CAAC;IA3BGF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,IAAI,CAACE,KAAK,GAAG;MACTD,IAAI,EAAC;IACT,CAAC;EACL;;EAEA;EACA,OAAOE,wBAAwBA,CAACR,KAAK,EAAEO,KAAK,EAAE;IAC1CH,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,OAAO,IAAI;EACf;;EAEA;EACAI,iBAAiBA,CAAA,EAAG;IAChBL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACpC;;EAEA;EACAK,qBAAqBA,CAACC,SAAS,EAAEC,SAAS,EAAE;IACxCR,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAO,IAAI;EACf;EAQA;EACAQ,kBAAkBA,CAACX,SAAS,EAAEC,SAAS,EAAE;IACrCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,OAAO,IAAI;EACf;EAEAS,MAAMA,CAAA,EAAG;IACLV,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,oBACIR,OAAA;MAAAkB,QAAA,GAAK,qBACkB,EAAC,IAAI,CAACR,KAAK,CAACD,IAAI,eACnCT,OAAA;QAAQmB,SAAS,EAAC,iBAAiB;QAACC,OAAO,EAAEA,CAAA,KAAI,IAAI,CAACC,QAAQ,CAAC;UAACZ,IAAI,EAAC;QAAO,CAAC,CAAE;QAAAS,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC7F,IAAI,CAACf,KAAK,CAACD,IAAI,KAAG,OAAO,iBAAIT,OAAA,CAACF,mBAAmB;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAEd;AACJ;AAEA,eAAexB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}