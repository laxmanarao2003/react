{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactPractise\\\\src\\\\ClassComponentsPractise\\\\LifeCycleOfClassComponent.js\";\nimport React, { Component } from 'react';\nimport UnmountingClassComponent from './UnmountingClassComponent';\n\n/**\r\n * Lifecycle of a class component\r\n * 3 phases:-\r\n *  1. Mounting\r\n *  2. Updating\r\n *  3. Unmounting\r\n * \r\n *  1.Mounting =>\r\n *     1. constructor()\r\n *     2. getDerivedStateFromProps()\r\n *     3. render()\r\n *     4. componentDidMount()\r\n * \r\n *  2. Updating =>\r\n *     1. getDerivedStateFromProps()\r\n *     2. shouldComponentUpdate()\r\n *     3.render()\r\n *     4.getSnapshotBeforeUpdate()\r\n *     5.componentDidUpdate()\r\n * \r\n *  3. Unmounting =>\r\n *     componentWillUnmount()\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LifeCycleOfClassComponent extends Component {\n  constructor(props) {\n    super(props);\n    // getSnapshotBeforeUpdate is used to access the current state before update :)\n    this.getSnapshotBeforeUpdate = (prevProps, prevState) => {\n      console.log(prevState.name);\n      return true;\n    };\n    this.state = {\n      name: \"Rohit Sharma\"\n    };\n    console.log(\"Constructor called\");\n  }\n\n  // getDerivedStateFromProps will be initiated before render the elements into DOM\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"getDerivedStateFromProps\");\n    return true;\n  }\n\n  // renders html elements into DOM\n  render() {\n    console.log(\"render\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [\"LifeCycleOfClassComponent \", this.state.name, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => this.setState({\n          name: \"Virat Kohli\"\n        }),\n        children: \"click!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), this.state.name === \"ROhit Sharma\" && /*#__PURE__*/_jsxDEV(UnmountingClassComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 60\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n  // componentDidMount() is called after execution of all the child components\n  componentDidMount() {\n    console.log(\"componentDidMount called\");\n  }\n\n  // Upadating \n\n  // It decides whether a state will be update or not :)\n  shouldComponentUpdate() {\n    if (this.state.name === \"Rohit Sharma\") return true;\n    return false;\n  }\n  // componentDidUpdate will be called after state gets updated :)\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.name);\n  }\n}\nexport default LifeCycleOfClassComponent;","map":{"version":3,"names":["React","Component","UnmountingClassComponent","jsxDEV","_jsxDEV","LifeCycleOfClassComponent","constructor","props","getSnapshotBeforeUpdate","prevProps","prevState","console","log","name","state","getDerivedStateFromProps","render","className","children","onClick","setState","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","shouldComponentUpdate","componentDidUpdate"],"sources":["D:/reactPractise/src/ClassComponentsPractise/LifeCycleOfClassComponent.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport UnmountingClassComponent from './UnmountingClassComponent'\r\n\r\n/**\r\n * Lifecycle of a class component\r\n * 3 phases:-\r\n *  1. Mounting\r\n *  2. Updating\r\n *  3. Unmounting\r\n * \r\n *  1.Mounting =>\r\n *     1. constructor()\r\n *     2. getDerivedStateFromProps()\r\n *     3. render()\r\n *     4. componentDidMount()\r\n * \r\n *  2. Updating =>\r\n *     1. getDerivedStateFromProps()\r\n *     2. shouldComponentUpdate()\r\n *     3.render()\r\n *     4.getSnapshotBeforeUpdate()\r\n *     5.componentDidUpdate()\r\n * \r\n *  3. Unmounting =>\r\n *     componentWillUnmount()\r\n*/\r\n\r\nclass LifeCycleOfClassComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            name:\"Rohit Sharma\"\r\n        }\r\n        console.log(\"Constructor called\")\r\n    }\r\n\r\n    // getDerivedStateFromProps will be initiated before render the elements into DOM\r\n    static getDerivedStateFromProps(props, state) {\r\n        console.log(\"getDerivedStateFromProps\")\r\n        return true\r\n    }\r\n\r\n    // renders html elements into DOM\r\n    render() {\r\n        console.log(\"render\");  \r\n        return (\r\n            <div className='text-center'>\r\n                LifeCycleOfClassComponent {this.state.name}\r\n                <button className='btn btn-primary' \r\n                    onClick={()=>this.setState({name:\"Virat Kohli\"})}>click!\r\n                </button>\r\n\r\n                {\r\n                    ((this.state.name===\"ROhit Sharma\") && <UnmountingClassComponent/>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // componentDidMount() is called after execution of all the child components\r\n    componentDidMount() { \r\n        console.log(\"componentDidMount called\")\r\n    }\r\n\r\n    // Upadating \r\n\r\n    // It decides whether a state will be update or not :)\r\n    shouldComponentUpdate()\r\n    {\r\n        if(this.state.name===\"Rohit Sharma\")\r\n            return true\r\n        return false\r\n    }\r\n\r\n    // getSnapshotBeforeUpdate is used to access the current state before update :)\r\n    getSnapshotBeforeUpdate = (prevProps, prevState) => {\r\n        console.log(prevState.name)\r\n        return true\r\n    }\r\n\r\n    // componentDidUpdate will be called after state gets updated :)\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(this.state.name);\r\n    }\r\n\r\n}\r\n\r\nexport default LifeCycleOfClassComponent"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,wBAAwB,MAAM,4BAA4B;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA,SAAAC,MAAA,IAAAC,OAAA;AAwBA,MAAMC,yBAAyB,SAASJ,SAAS,CAAC;EAC9CK,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IA8ChB;IAAA,KACAC,uBAAuB,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;MAChDC,OAAO,CAACC,GAAG,CAACF,SAAS,CAACG,IAAI,CAAC;MAC3B,OAAO,IAAI;IACf,CAAC;IAhDG,IAAI,CAACC,KAAK,GAAG;MACTD,IAAI,EAAC;IACT,CAAC;IACDF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EACrC;;EAEA;EACA,OAAOG,wBAAwBA,CAACR,KAAK,EAAEO,KAAK,EAAE;IAC1CH,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,OAAO,IAAI;EACf;;EAEA;EACAI,MAAMA,CAAA,EAAG;IACLL,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,oBACIR,OAAA;MAAKa,SAAS,EAAC,aAAa;MAAAC,QAAA,GAAC,4BACC,EAAC,IAAI,CAACJ,KAAK,CAACD,IAAI,eAC1CT,OAAA;QAAQa,SAAS,EAAC,iBAAiB;QAC/BE,OAAO,EAAEA,CAAA,KAAI,IAAI,CAACC,QAAQ,CAAC;UAACP,IAAI,EAAC;QAAa,CAAC,CAAE;QAAAK,QAAA,EAAC;MACtD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAGH,IAAI,CAACV,KAAK,CAACD,IAAI,KAAG,cAAc,iBAAKT,OAAA,CAACF,wBAAwB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErE,CAAC;EAEd;;EAEA;EACAC,iBAAiBA,CAAA,EAAG;IAChBd,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EAC3C;;EAEA;;EAEA;EACAc,qBAAqBA,CAAA,EACrB;IACI,IAAG,IAAI,CAACZ,KAAK,CAACD,IAAI,KAAG,cAAc,EAC/B,OAAO,IAAI;IACf,OAAO,KAAK;EAChB;EAQA;EACAc,kBAAkBA,CAAClB,SAAS,EAAEC,SAAS,EAAE;IACrCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACE,KAAK,CAACD,IAAI,CAAC;EAChC;AAEJ;AAEA,eAAeR,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}